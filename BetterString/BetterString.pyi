from .constants import *
from . import Color as Color, Exceptions as Exceptions
from typing import Any, Iterator, Tuple

class BetterString(str):
    string: Any
    def __init__(self, string: str) -> None: ...
    def lower(self, end: int = ..., start: int = ...) -> BetterString: ...
    def upper(self, end: int = ..., start: int = ...) -> BetterString: ...
    def to_literal(self) -> any: ...
    def str(self) -> str: ...
    def colorize(self, color: str = ..., bg: str = ..., bold: bool = ..., underline: bool = ..., start: int = ..., end: int = ...) -> BetterString: ...
    def shuffle(self) -> BetterString: ...
    def bomb(self) -> BetterString: ...
    def permutations(self) -> Iterator[Tuple[Any, ...]]: ...
    def rainbow(self) -> BetterString: ...
    def sha512(self) -> str: ...
    def sha256(self) -> str: ...
    def sha1(self) -> str: ...
    def rot(self, rot: int = ...) -> BetterString: ...
    def binary(self, liste: bool = ...) -> list or str: ...
    def hex(self) -> str: ...
    def count(self, pattern: str, start: int = ..., end: int = ..., regex: bool = ...) -> int: ...
    def replace(self, old: str, new: str = ..., count: int = ..., regex: bool = ...) -> BetterString: ...
    def remove(self, pattern: str, count: int = ..., regex: bool = ...) -> BetterString: ...
    def swap(self, index1: int, index2: int) -> BetterString: ...
    def capitalize(self) -> BetterString: ...
    def casefold(self) -> BetterString: ...
    def center(self, width: int, fillchar: str = ...) -> BetterString: ...
    def expandtabs(self, tabsize: int = ...) -> BetterString: ...
    def format(self, *args, **kwargs) -> BetterString: ...
    def format_map(self, mapping) -> BetterString: ...
    def join(self, iterable: Iterator) -> BetterString: ...
    def ljust(self, width: int, fillchar: str = ...) -> BetterString: ...
    def lstrip(self, chars: str = ...) -> BetterString: ...
    def rjust(self, width: int, fillchar: str = ...) -> BetterString: ...
    def rstrip(self, chars: str = ...) -> BetterString: ...
    def strip(self, chars: str = ...) -> BetterString: ...
    def swapcase(self) -> BetterString: ...
    def title(self) -> BetterString: ...
    def translate(self, table) -> BetterString: ...
    def schinken_hash(self) -> str: ...
    def zfill(self, width: int) -> BetterString: ...
    def __getitem__(self, item: int or slice) -> BetterString: ...
    def __call__(self) -> Exception: ...
    def __add__(self, value: int or str) -> BetterString: ...
    def __getnewargs__(self) -> tuple: ...
    def __mul__(self, value: int) -> BetterString: ...
    def __rmul__(self, value: int) -> BetterString: ...
